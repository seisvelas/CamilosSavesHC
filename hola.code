#!/usr/bin/env python
# -*- coding: utf-8 -*- (lol in theory)

import curses
import os # let's us test code in NodeJS via shell command! No security here folks!
from curses.textpad import Textbox, rectangle
import sys ## This makes Unicode (kind of) work
reload(sys)
sys.setdefaultencoding('utf-8')

class Camilo:
    def __init__(self):
        self.direction = "left"
	self.loc       = None
        self.body      = [  
		"  __      _",
		"o'')}____//",
		" `_/      )",
		" (_(_/-(_/" ]
        self.level     = ["factorial(x)", "fibonacci(x)", "pascal(x)"]
        self.level_d   = ["returns the factorial of x", 
                          "returns the xth fibonacci number",
                          "returns the xth layer of Pascal's Triangle"]
        self.answers   = ["120", "3", "14641"]

    def keypress(self, key, dims):
        if key == curses.KEY_LEFT and self.loc[1] > 5:
            if self.direction == "right":
                for i in range(len(self.body)):
                    self.body[i] = self.body[i][::-1]
                self.direction = "left"
            self.loc[1] = self.loc[1] - 1
        if key == curses.KEY_RIGHT and (self.loc[1] < (dims[1] - 20)):
            if self.direction == "left":
                for i in range(len(self.body)):
                    self.body[i] = self.body[i][::-1]
                self.direction = "right"
            self.loc[1] = self.loc[1] + 1

    def update_level(self):
        self.level = self.level[1:]
        self.level_d = self.level_d[1:]
        self.answers = self.answers[1:]

    def js_test(self, message):
        f = open("code.log", "w")
        f.write("const fs = require('fs');\n" + message + """
x = 5

fs.writeFileSync("test", """ + self.level[0] + ", 'utf8')\n")

        f.close()
        os.system("node code.log")
        l = open("test", "r")
        r = l.read()
        l.close()

        return r == self.answers[0]

## Fire up curses boilerplate
stdscr = curses.initscr()
curses.noecho()
curses.cbreak()
stdscr.keypad(True)
stdscr.clear()

## Instantiate Camilo
c            = Camilo()
dims         = stdscr.getmaxyx()
c.loc        = [dims[0]/2, dims[1]/2]
floor        = "-" * (dims[1])
poop         = "ðŸ’©"
poop_location = 0
poop_present = False
poop_delta   = 15
game         = 1
final_msg    = "HOLACEOD MAKE BILLION MONEY. YOU HAVE JOB!! $$ MUCH JOB"
## Game loop
while game:
    stdscr.addstr(c.loc[0]+6, dims[1]/2 - 5, "Camilo is hungry for POOP! (q to quit)")
    if game%4==0 and not poop_present:
        poop_present = True
        poop_location = c.loc[1] + poop_delta + 3
    if poop_present:
        stdscr.addstr(c.loc[0]+3, poop_location - 6, poop)
    
    stdscr.addstr(c.loc[0]+4, 0, floor)
    for i in range(len(c.body)):
        stdscr.addstr(c.loc[0]+i, c.loc[1], c.body[i])
        stdscr.refresh()
    key = stdscr.getch()
    stdscr.clear()

    if key == ord('q'):
        game = -1  ## SHUT DOWN GAME

    c.keypress(key, dims)


    if poop_location - 3 == c.loc[1]:  ## Camilo has eaten poop
        if len(c.level) == 0:
            break
        poop_present = False
        poop_delta = -poop_delta
        
        stdscr.addstr(0, 0, "an investor insists you write JS function " + c.level[0] + " that " + c.level_d[0] + "! (CTRL + G to send!)")

        editwin = curses.newwin(20,50, 2,1)
        rectangle(stdscr, 1,0, 20, 50)
        stdscr.refresh()

        box = Textbox(editwin)

    # Let the user edit until Ctrl-G is struck.
        box.edit()

    # Get resulting contents
        message = box.gather()  

        if c.js_test(message):
           c.update_level()
        else:
           final_msg = "HOLACODE HAS FAILED AND NONE OF US HAVE JOB OR BILLION MONEY!!!"
           break   
    game += 1

## Shut down curses
curses.nocbreak()
stdscr.keypad(False)
curses.echo()
curses.endwin()

print final_msg
